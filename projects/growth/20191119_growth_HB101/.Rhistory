}
return(raw_data)
}
## option to select number of models
model_selection <- function(raw_data, model_num = 4) {
require(tidyverse); require(readr)
#loads appropriate file based on number of models selected.
#Might be best to keep combo.csv files in one place -- can then specify path
if (model_num == 2) {
model_selected <- readr::read_csv("/Users/grad/Documents/GitHub/easyXpress/model_combinations/two_model_combo.csv")
print("SELECTED TWO MODEL FILE")
} else if (model_num == 3) {
model_selected <- readr::read_csv("/Users/grad/Documents/GitHub/easyXpress/model_combinations/three_model_combo.csv")
print("SELECTED THREE MODEL FILE")
} else if (model_num == 4) {
model_selected <- readr::read_csv("/Users/grad/Documents/GitHub/easyXpress/model_combinations/four_model_combo.csv")
print("SELECTED FOUR MODEL FILE")
}
#join combination file with raw data
model_selected <- raw_data %>%
dplyr::group_by(Metadata_Plate, Metadata_Well, Parent_WormObjects, model) %>%
dplyr::mutate(num_worms = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Metadata_Plate, Metadata_Well, Parent_WormObjects) %>%
dplyr::distinct(model, .keep_all = T) %>%
dplyr::ungroup() %>%
dplyr::select(Metadata_Plate, Metadata_Well, Parent_WormObjects, model, num_worms) %>%
tidyr::spread(model, num_worms) %>%
dplyr::mutate_at(tail(names(.),model_num), ~replace(.,.>2,2)) %>% ### replace any value >2 with 2
dplyr::mutate_if(is.numeric , replace_na, replace = 0) %>% ### replaced NA with zero
dplyr::left_join(., model_selected) %>%
dplyr::full_join(., raw_data) %>%
dplyr::filter(model == model_select)
return(model_selected)
}
dirs <- "output_100w_model" #folder containing output data from cell profiler pipeline run.
## option to set your own radius
edge_flag <- function(raw_data, radius = 825) {
edge_flag_center_x <- 1024; edge_flag_center_y <- 1024; edge_flag_radius <- radius #set well edge flag parameters for plotting and flagging
edge_flagged <- raw_data %>%
dplyr::mutate(well_edge_flag = ifelse(sqrt((AreaShape_Center_X - edge_flag_center_x)^2 + (AreaShape_Center_Y - edge_flag_center_y)^2) <= edge_flag_radius, FALSE, TRUE))
return(edge_flagged)
}
## this function will calculate outliers based on flags of interest (cluster_flag/well_edge_flag)
## it will then record which flags were removed to calculate well outlier (flags_removed column)
set_flags <- function(data, cluster_flag = TRUE, well_edge_flag = TRUE) {
require(tidyverse)
# removes outliers function (tukey's fences)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
if(!cluster_flag & !well_edge_flag) {
print("NO FLAGS SELECTED FOR FILTERING")
flag_data <- data %>%
dplyr::group_by(Metadata_Plate, Metadata_Well) %>%
dplyr::mutate(well_outlier_flag = (remove_outliers(worm_length_um)),
well_outlier_flag = ifelse(is.na(well_outlier_flag), TRUE, FALSE)) %>%
dplyr::ungroup() %>%
dplyr::full_join(.,data)
} else if(!well_edge_flag) {
print("FILTERING CLUSTER FLAGS ONLY")
flag_data <- data %>%
dplyr::filter(cluster_flag != T, well_edge_flag !=F) %>%
dplyr::mutate(flag_removed = TRUE) %>% # record the flags that were removed
dplyr::group_by(Metadata_Plate, Metadata_Well) %>%
dplyr::mutate(well_outlier_flag = (remove_outliers(worm_length_um)),
well_outlier_flag = ifelse(is.na(well_outlier_flag), TRUE, FALSE)) %>%
dplyr::ungroup() %>%
dplyr::full_join(.,data) %>%
dplyr::mutate(flags_removed= "rm_cluster_flag") # record the flags that were removed
} else if(!cluster_flag) {
print("FILTERING WELL EDGE FLAGS ONLY")
flag_data <- data %>%
dplyr::filter(cluster_flag != F, well_edge_flag !=T) %>%
dplyr::mutate(flag_removed = TRUE) %>%
dplyr::group_by(Metadata_Plate, Metadata_Well) %>%
dplyr::mutate(well_outlier_flag = (remove_outliers(worm_length_um)),
well_outlier_flag = ifelse(is.na(well_outlier_flag), TRUE, FALSE)) %>%
dplyr::ungroup() %>%
dplyr::full_join(.,data) %>%
dplyr::mutate(flags_removed= "rm_well_edge_flag")
} else {
print("FILTERING BOTH CLUSTER AND WELL EDGE FLAGS")
flag_data <- data %>%
dplyr::filter(cluster_flag != T, well_edge_flag !=T) %>%
dplyr::mutate(flag_removed = TRUE) %>%
dplyr::group_by(Metadata_Plate, Metadata_Well) %>%
dplyr::mutate(well_outlier_flag = (remove_outliers(worm_length_um)),
well_outlier_flag = ifelse(is.na(well_outlier_flag), TRUE, FALSE)) %>%
dplyr::ungroup() %>%
dplyr::full_join(.,data) %>%
dplyr::mutate(flags_removed= "rm_cluster_flag, rm_well_edge_flag")
}
return(flag_data)
}
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data, ...) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(...)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
total_run <- Xpress(dirs, Metadata_Plate, Metadata_Well)
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = .)
return(output)
}
total_run <- Xpress(dirs, Metadata_Plate, Metadata_Well)
View(total_run)
total_run <- Xpress(dirs, ... = Metadata_Plate, Metadata_Well)
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, summarize.by = ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = .)
return(output)
}
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data, summarize.by = ...) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(...)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, summarize.by = ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = .)
return(output)
}
total_run <- Xpress(dirs, summarize.by = Metadata_Plate, Metadata_Well)
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data, summarize.by = ...) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
#sum_by <- raw_data %>%
#dplyr::select(...)
#print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
#run
final <- process(flag_lab, Metadata_Plate, Metadata_Hour, Metadata_Well)
#pulling summarized_processed dataframe
processed_sum <- all$summarized_processed
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, summarize.by = ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = .)
return(output)
}
dirs <- "output_100w_model" #folder containing output data from cell profiler pipeline run.
total_run <- Xpress(dirs, summarize.by = Metadata_Plate, Metadata_Well)
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data,  ...) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(...)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = ., ...)
return(output)
}
dirs <- "output_100w_model" #folder containing output data from cell profiler pipeline run.
total_run <- Xpress(dirs, summarize.by = Metadata_Plate, Metadata_Well)
total_run <- Xpress(dirs, Metadata_Plate, Metadata_Well)
total_run <- Xpress(dirs, ... =  Metadata_Plate, Metadata_Well)
View(total_run)
View(total_run[["summarized_processed"]])
total_run <- Xpress(dirs, ... = c(Metadata_Plate, Metadata_Well))
total_run <- Xpress(dirs, ... = (Metadata_Plate, Metadata_Well))
total_run <- Xpress(dirs, ... = (Metadata_Plate & Metadata_Well))
total_run <- Xpress(dirs, ... = Metadata_Plate & Metadata_Well)
total_run <- Xpress(dirs, ... = Metadata_Plate, Metadata_Well)
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data,  ... = summarized.by) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(...)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data,  ... = summarized.by) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(summarized.by) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(summarized.by) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(summarized.by)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
#run
final <- process(flag_lab, Metadata_Plate, Metadata_Hour, Metadata_Well)
#run
raw <- read_data(dirs)
#run
mselect <- model_selection(raw, model_num = 4)
#run
edge_flg <- edge_flag(mselect, radius = 825)
#run
flag_lab <- set_flags(edge_flg, cluster_flag = T, well_edge_flag = T)
#run
final <- process(flag_lab, Metadata_Plate, Metadata_Hour, Metadata_Well)
# this function creates 4 dataframes
## !!! be sure to specify what you are summarizing by in "..." !!! ##
process <- function(flag_data,  ...) {
require(tidyverse)
# 1 -- data as is, after above steps. Nothing removed
raw_data <- flag_data
# 2 -- removing rows where flag = TRUE
processed_data <- flag_data %>%
dplyr::filter(flag_removed == TRUE) %>% #indicates rows in which flagged data are appropriately removed. See "set_flags()" function
dplyr::filter(well_outlier_flag == FALSE) #data in this row is NOT an outlier
# 3 -- summarizing #1 by "..."
summarized_raw <- raw_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
# 4 -- summarizing #2 by "..."
summarized_processed <- processed_data %>%
dplyr::group_by(...) %>%
dplyr::summarize(mean_wormlength_um = mean(worm_length_um, na.rm = TRUE),
min_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[1]),
q10_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.1, na.rm = TRUE)[1]),
q25_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.25, na.rm = TRUE)[1]),
median_wormlength_um = median(worm_length_um, na.rm = T),
sd_wormlength_um = sd(worm_length_um, na.rm = T),
q75_wormlength_um = as.numeric(quantile(worm_length_um, probs = 0.75, na.rm = TRUE)[1]),
q90_wormlength_umF = as.numeric(quantile(worm_length_um, probs = 0.90, na.rm = TRUE)[1]),
max_wormlength_um = as.numeric(quantile(worm_length_um, na.rm = TRUE)[5]),
cv_wormlength_um = (sd_wormlength_um/mean_wormlength_um))
sum_by <- raw_data %>%
dplyr::select(...)
print(paste("SUMMARIZED BY", names(sum_by))) #altering you what is bring summarized
return(list("raw_data" = raw_data, "processed_data" = processed_data,
"summarized_raw" = summarized_raw, "summarized_processed" = summarized_processed))
}
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE, ...) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = ., ...)
return(output)
}
total_run <- Xpress(dirs, Metadata_Plate, Metadata_Well)
View(total_run)
#####
# this function will basically run each of the above functions in order in a single step
## just be sure to specify any additional arguments!!
Xpress <- function(filedir, ..., design = FALSE, model_num = 4, radius = 825, cluster_flag = TRUE, well_edge_flag = TRUE) {
output <- read_data(filedir) %>%
model_selection(raw_data = .) %>%
edge_flag(raw_data = .) %>%
set_flags(data = .) %>%
process(flag_data = ., ...)
return(output)
}
total_run <- Xpress(dirs, Metadata_Plate, Metadata_Well)
#run
final <- process(flag_lab, Metadata_Plate, Metadata_Hour, Metadata_Well)
View(final)
View(total_run)
